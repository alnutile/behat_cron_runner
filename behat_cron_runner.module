<?php

use Drupal\BehatEditor,
    Drupal\BehatEditorSauceLabs,
    Drupal\BehatRunner;

define('BEHAT_CRON_RUNNER_OFFSET_SECONDS', '3600');

/**
 * @file
 * Setup @critical feature files to run per cron
 */

/**
 * Implements hook_permission().
 *
 * Who can see the tests
 */

function behat_cron_runner_permission() {
    $items['behat cron runner see tests'] = array(
        'title' => t('Can see tests marked @critical'),
        'description' => t('Can see tests marked @critical')
    );
    return $items;
}

/**
 * Implements hook_menu().
 *
 * Show some stats for the jobs
 *
 */

function behat_cron_runner_menu() {
    $path = drupal_get_path('module', 'behat_cron_runner');
    $items['admin/behat/index/critical'] = array(
        'page callback' => 'behat_cron_runner_index',
        'access arguments' => array('behat cron runner see tests'),
        'file' => 'behat_cron_runner_index.inc',
        'file path' => "$path/includes/"
    );

    /**
     * no menu for wormly.html since it is in the files folder
     */

    return $items;
}

/**
 * Worker to kickoff the tests
 *
 * loops through all the @critical tests
 * and sends that test to the test runner each
 *
 * @param $item
 *   Any object to be worked on
 *
 * @todo consider running one tests per Drupal
 *   DrupalQueue::get('test_file_name');
 */
function _behat_cron_runner_test($criticals) {
    composer_manager_register_autoloader();
    $wormlyReport = new Drupal\BehatRunner\WormlyReport();
    $results = array();
    foreach($criticals as $key) {
        $run = 1;
        $test = _behat_cron_runner_test_each($key, 1);
        $status = $test['results'];
        if($status === 1 && $run == 1) {
            $run = 2;
            $test = _behat_cron_runner_test_each($key, $run);
            $duration = array_pop($test['output']);
            $status = $test['results'];
            $results[] = array('file_object' => $key, 'status' => $status, 'duration' => $duration, 'time' => time());
        } else {
            $duration = array_pop($test['output']);
            $results[] = array('file_object' => $key, 'status' => $status, 'duration' => $duration, 'time' => time());
        }
        $wormlyReport->row($results);
    }
    $wormlyReport->createWormlyPage();
}

/**
 * Runs the actual test
 *
 * Runs again if Fail
 */
function _behat_cron_runner_test_each($key, $run) {
    $res = new Drupal\BehatRunner\BehatCronRunnerExec($key);
    $test = $res->exec(1);
    return $test;
}

/**
 * Output for the Admin area
 *
 * @param $files_array
 * @return string
 */
function _behat_cron_runner_table($files_array) {
    $rows = array();
    foreach($files_array as $key => $value) {
        $file_name = $value['filename'];
        $module_name = $value['module'];
        $tags = implode(', ', $value['tags_array']);
        $rows[] = array(
            'data' =>
            array
            (
                _show_file_link($file_name, $module_name),
                $module_name,
                $tags,
                _show_link($file_name, $module_name, $link_text = 'view'),
                _show_link($file_name, $module_name, $link_text = 'edit'),
                _show_link($file_name, $module_name, $link_text = 'delete'),
            )
        );
    };

    $header = array(
        'Name',
        'Module',
        'Tags',
        'View',
        'Edit',
        'Delete',
    );

    $behat_table = theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array('class' => array('table-hover'), 'id' => 'admin-features')
    ));

    return $behat_table;
}



/**
 * Implements hook_cron().
 *
 * Check if it is time to run again
 * using behat_cron_runner_offset_seconds()
 *
 * If TRUE trigger the job(s) with behat_cron_runner_foreach_critical_tests()
 */



/**
 * Implements hook_module_enable().
 *
 * Recreate the critical_tests cache
 *
 */


/**
 * Implements hook_module_disable().
 *
 * Recreate the critical_tests cache
 *
 */


/**
 * Extends the File class to add a
 * rebuild on Save file
 */